'''
除了使用type()动态创建类以外，要控制类的创建行为，还可以使用metaclass。
metaclass，直译为元类，简单的解释就是：
先定义metaclass，就可以创建类，最后创建实例。
'''


class ListMetaclass(type):
    def __new__(cls, name, bases, attrs):
        '''
        ：cls：当前准备创建的类的对象
        :param name: 类的名字
        :param bases: 类继承的父类集合
        :param attrs: 类的方法集合
        :return: type类型的对象
        '''
        attrs['add'] = lambda self, value: self.append(value)  # 新增一个add的方法
        return type.__new__(cls, name, bases, attrs)


class Mylist(list, metaclass=ListMetaclass):
    '''
    创建一个listmetaclass类型的类
    '''
    pass


L = Mylist()
L.add(1)
print(L)
