'''
除了使用type()动态创建类以外，要控制类的创建行为，还可以使用metaclass。
metaclass，直译为元类，简单的解释就是：
先定义metaclass，就可以创建类，最后创建实例。
'''


class ListMetaclass(type):
    def __new__(cls, name, bases, attrs):
        '''
        ：cls：当前准备创建的类的对象
        :param name: 类的名字
        :param bases: 类继承的父类集合
        :param attrs: 类的方法集合
        :return: type类型的对象
        '''
        attrs['add'] = lambda self, value: self.append(value)  # 新增一个add的方法
        return type.__new__(cls, name, bases, attrs)


class Mylist(list, metaclass=ListMetaclass):
    '''
    创建一个listmetaclass类型的类
    '''
    pass


L = Mylist()
L.add(1)
print(L)


class Field(object):
    def __init__(self, name, column_type):
        self.name = name
        self.column_type = column_type

    def _str(self):
        return '<%s:%s>' % (self.__class__.__name__, self.name)


class StringField(Field):
    def __init__(self, name):
        Field.__init__(self, name, 'varchar(100)')


class IntegerField(Field):
    def __init__(self, name):
        Field.__init__(self, name, 'bigint')


class ModelMetaclass(type):
    def __new__(cls, name, bases, attrs):
        if name == 'Model':
            return type.__new__(cls, name, bases, attrs)
        print('Found model: %s' % name)
        mappings = dict()
        for k, v in attrs.items():
            if isinstance(v, Field):
                print('Found mapping: %s ==> %s' % (k, v))
                mappings[k] = v
        for k in mappings.keys():
            attrs.pop(k)
        attrs['__mappings__'] = mappings
        attrs['__table__'] = name
        return type.__new__(cls, name, bases, attrs)


class Model(dict, metaclass=ModelMetaclass):
    def __init__(self, **kw):
        super(Model, self).__init__(**kw)

    def __getattr__(self, item):
        try:
            return self[item]
        except keyError:
            raise AttributeError(r"'Model' objet has no attribute '%s'" % item)

    def __setattr__(self, key, value):
        self[key] = value

    def save(self):
        fields = []
        params = []
        args = []
        for k, v in self.items():
            fields.append(k)
            params.append('?')
            args.append(getattr(self, k, None))
        sql = 'insert into %s (%s) VALUE (%s)' % (self.__table__, ','.join(fields), ','.join(params))
        print('SQL: %s' % sql)
        print('ARGS: %s' % str(args))


class User(Model):
    id = IntegerField('id')
    name = StringField('username')
    email = StringField('email')
    password = StringField('password')


u = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')
u.save()
